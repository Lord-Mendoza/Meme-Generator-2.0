{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\src\\\\MemeList.js\";\n\n/*\nLord Mendoza\nSWE 432 - HW4\n\nThe following is in charge of displaying the memes, whether it be the homepage or the \"view favorite memes\" page\n */\nimport React, { Component } from \"react\";\nimport { Button, Panel } from \"react-bootstrap\";\nimport firebase from \"./firebase\";\nimport Pagination from \"react-js-pagination\";\nimport LoadedImage from \"./LoadedImage\";\nimport MemeClient from \"./MemeClient\";\nimport FavoriteButton from \"./FavoriteButton\";\nvar client = new MemeClient();\n\nvar MemeList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemeList, _Component);\n\n  function MemeList(props) {\n    var _this;\n\n    _classCallCheck(this, MemeList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemeList).call(this, props));\n    /*\n    State properties & purpose are trivial\n     */\n\n    _this.state = {\n      listOfMemes: {},\n      listOfImages: [],\n      imagesToDisplay: [],\n      observerMethod: undefined,\n      activePage: 1\n    };\n    _this.pageChangeHandler = _this.pageChangeHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.sortImages = _this.sortImages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.splitImageArray = _this.splitImageArray.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /*\n  Will check if the user is pointed at homepage or view saved memes. If homepage, display all generated memes\n   from all users. If view saved memes, only show the user's favorited memes.\n   */\n\n\n  _createClass(MemeList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.isUnfiltered) {\n        var cancelSnapshot1 = firebase.firestore.collection(\"spicyGeneratedMemes\").orderBy(\"creationDate\", \"desc\").onSnapshot(function (snapshot) {\n          var memesFromDatabase = [];\n          snapshot.forEach(function (meme) {\n            memesFromDatabase.push(meme.data());\n          });\n          Object.values(memesFromDatabase).map(function (meme) {\n            client.generateMeme(meme.templateName, meme.templateText).then(\n            /*#__PURE__*/\n            function () {\n              var _ref = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee(image) {\n                var newState;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        newState = {\n                          date: meme.creationDate,\n                          img: image,\n                          template: meme\n                        };\n                        _context.next = 3;\n                        return _this2.setState(function (prevState) {\n                          return {\n                            listOfMemes: memesFromDatabase,\n                            listOfImages: prevState.listOfImages.concat(newState),\n                            observerMethod: cancelSnapshot1\n                          };\n                        });\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, this);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }()).then(function (v) {\n              return _this2.sortImages();\n            }) //Every time a new image is inserted to the state, re-sort the images\n            .then(function (v) {\n              return _this2.splitImageArray();\n            }); //Split the array into 10s\n          });\n        });\n      } else {\n        var cancelSnapshot2 = firebase.firestore.collection(firebase.auth.currentUser.email).orderBy(\"creationDate\", \"desc\").onSnapshot(function (snapshot) {\n          var memesFromDatabase = [];\n          snapshot.forEach(function (meme) {\n            memesFromDatabase.push(meme.data());\n          });\n          Object.values(memesFromDatabase).map(function (meme) {\n            client.generateMeme(meme.templateName, meme.templateText).then(\n            /*#__PURE__*/\n            function () {\n              var _ref2 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(image) {\n                var newState;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        newState = {\n                          date: meme.creationDate,\n                          img: image,\n                          template: meme\n                        };\n                        _context2.next = 3;\n                        return _this2.setState(function (prevState) {\n                          return {\n                            listOfMemes: memesFromDatabase,\n                            listOfImages: prevState.listOfImages.concat(newState),\n                            observerMethod: cancelSnapshot2\n                          };\n                        });\n\n                      case 3:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, this);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }()).then(function (v) {\n              return _this2.sortImages();\n            }) //Every time a new image is inserted to the state, re-sort the images\n            .then(function (v) {\n              return _this2.splitImageArray();\n            }); //Split the array into 10s\n          });\n        });\n      }\n    }\n    /*\n    Sorts the images by accessing the date property of the image in the state, then puts them in most recent-oldest\n     */\n\n  }, {\n    key: \"sortImages\",\n    value: function sortImages() {\n      var temp = this.state.listOfImages;\n      temp.sort(function (a, b) {\n        return new Date(b.date) - new Date(a.date);\n      });\n      this.setState({\n        listOfImages: temp\n      });\n    }\n    /*\n    Divides up the listOfImages into groups of 10s, and stores each group into imagesToDisplay\n    so that Pagination shows 10 images at a time\n     Most of the code is borrowed from:\n    https://ourcodeworld.com/articles/read/278/how-to-split-an-array-into-chunks-of-the-same-size-easily-in-javascript\n    (OK'ed by Professor Bell)\n     */\n\n  }, {\n    key: \"splitImageArray\",\n    value: function splitImageArray() {\n      var index = 0;\n      var myArray = this.state.listOfImages;\n      var arrayLength = this.state.listOfImages.length;\n      var chunk_size = 10;\n      var tempArray = [];\n\n      for (index = 0; index < arrayLength; index += chunk_size) {\n        var myChunk = myArray.slice(index, index + chunk_size);\n        tempArray.push(myChunk);\n      }\n\n      this.setState({\n        imagesToDisplay: tempArray\n      });\n    }\n    /*\n    When the component unmounts, the observer method is called to avoid leakage.\n     */\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.observerMethod !== undefined) this.state.observerMethod();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(prevProps) {}\n    /*\n    Handles page changes\n     */\n\n  }, {\n    key: \"pageChangeHandler\",\n    value: function pageChangeHandler(pageNumber) {\n      this.setState({\n        activePage: pageNumber\n      });\n    }\n    /*\n    If there are no images to show, don't show anything. Otherwise, show the images & buttons.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.listOfImages.length === 0 || this.state.imagesToDisplay.length === 0 || firebase.auth.currentUser === null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(Pagination, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }), React.createElement(Pagination, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(Pagination, {\n          activePage: this.state.activePage,\n          itemsCountPerPage: 10,\n          totalItemsCount: Object.keys(this.state.listOfMemes).length,\n          pageRangeDisplayed: 5,\n          onChange: this.pageChangeHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, Object.values(this.state.imagesToDisplay[this.state.activePage - 1]).map(function (v) {\n          return React.createElement(\"div\", {\n            className: \"alignDiv\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          }, React.createElement(LoadedImage, {\n            src: v.img,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176\n            },\n            __self: this\n          }), React.createElement(\"div\", {\n            className: \"text-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177\n            },\n            __self: this\n          }, React.createElement(FavoriteButton, {\n            src: v,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178\n            },\n            __self: this\n          })));\n        })), React.createElement(Pagination, {\n          activePage: this.state.activePage,\n          itemsCountPerPage: 10,\n          totalItemsCount: Object.keys(this.state.listOfMemes).length,\n          pageRangeDisplayed: 5,\n          onChange: this.pageChangeHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return MemeList;\n}(Component);\n\nexport { MemeList as default };","map":{"version":3,"sources":["C:\\Users\\zenik\\OneDrive\\School\\GMU\\Super Senior\\SWE 432\\Homeworks\\HW4\\src\\MemeList.js"],"names":["React","Component","Button","Panel","firebase","Pagination","LoadedImage","MemeClient","FavoriteButton","client","MemeList","props","state","listOfMemes","listOfImages","imagesToDisplay","observerMethod","undefined","activePage","pageChangeHandler","bind","sortImages","splitImageArray","isUnfiltered","cancelSnapshot1","firestore","collection","orderBy","onSnapshot","snapshot","memesFromDatabase","forEach","meme","push","data","Object","values","map","generateMeme","templateName","templateText","then","image","newState","date","creationDate","img","template","setState","prevState","concat","v","cancelSnapshot2","auth","currentUser","email","temp","sort","a","b","Date","index","myArray","arrayLength","length","chunk_size","tempArray","myChunk","slice","prevProps","pageNumber","keys"],"mappings":"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","sourcesContent":["/*\nLord Mendoza\nSWE 432 - HW4\n\nThe following is in charge of displaying the memes, whether it be the homepage or the \"view favorite memes\" page\n */\n\nimport React, {Component} from \"react\";\nimport {Button, Panel} from \"react-bootstrap\";\nimport firebase from \"./firebase\"\nimport Pagination from \"react-js-pagination\";\nimport LoadedImage from \"./LoadedImage\";\nimport MemeClient from \"./MemeClient\";\nimport FavoriteButton from \"./FavoriteButton\";\n\nlet client = new MemeClient();\n\nexport default class MemeList extends Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        /*\n        State properties & purpose are trivial\n         */\n        this.state = {listOfMemes: {}, listOfImages: [], imagesToDisplay: [], observerMethod: undefined, activePage: 1};\n        this.pageChangeHandler = this.pageChangeHandler.bind(this);\n        this.sortImages = this.sortImages.bind(this);\n        this.splitImageArray = this.splitImageArray.bind(this);\n    }\n\n    /*\n    Will check if the user is pointed at homepage or view saved memes. If homepage, display all generated memes\n     from all users. If view saved memes, only show the user's favorited memes.\n     */\n    componentDidMount()\n    {\n        if (this.props.isUnfiltered)\n        {\n            var cancelSnapshot1 = firebase.firestore.collection(\"spicyGeneratedMemes\").orderBy(\"creationDate\", \"desc\").onSnapshot(snapshot => {\n                var memesFromDatabase = [];\n                snapshot.forEach(meme => {\n                    memesFromDatabase.push(meme.data());\n                });\n\n                Object.values(memesFromDatabase).map(meme => {\n                    client.generateMeme(meme.templateName, meme.templateText).then(async image => {\n                        var newState = {date: meme.creationDate, img: image, template: meme};\n\n                        await this.setState((prevState) => ({\n                            listOfMemes: memesFromDatabase,\n                            listOfImages: prevState.listOfImages.concat(newState),\n                            observerMethod: cancelSnapshot1\n                        }));\n                    }).then(v => this.sortImages()) //Every time a new image is inserted to the state, re-sort the images\n                        .then(v => this.splitImageArray()); //Split the array into 10s\n                });\n            });\n        }\n        else\n        {\n            var cancelSnapshot2 = firebase.firestore.collection(firebase.auth.currentUser.email).orderBy(\"creationDate\", \"desc\").onSnapshot(snapshot => {\n                var memesFromDatabase = [];\n                snapshot.forEach(meme => {\n                    memesFromDatabase.push(meme.data());\n                });\n\n                Object.values(memesFromDatabase).map(meme => {\n                    client.generateMeme(meme.templateName, meme.templateText).then(async image => {\n                        var newState = {date: meme.creationDate, img: image, template: meme};\n\n                        await this.setState((prevState) => ({\n                            listOfMemes: memesFromDatabase,\n                            listOfImages: prevState.listOfImages.concat(newState),\n                            observerMethod: cancelSnapshot2\n                        }));\n                    }).then(v => this.sortImages()) //Every time a new image is inserted to the state, re-sort the images\n                        .then(v => this.splitImageArray()); //Split the array into 10s\n                });\n            });\n        }\n    }\n\n\n    /*\n    Sorts the images by accessing the date property of the image in the state, then puts them in most recent-oldest\n     */\n    sortImages()\n    {\n        var temp = this.state.listOfImages;\n        temp.sort(function (a, b) {\n            return new Date(b.date) - new Date(a.date);\n        });\n        this.setState({listOfImages: temp});\n    }\n\n    /*\n    Divides up the listOfImages into groups of 10s, and stores each group into imagesToDisplay\n    so that Pagination shows 10 images at a time\n\n    Most of the code is borrowed from:\n    https://ourcodeworld.com/articles/read/278/how-to-split-an-array-into-chunks-of-the-same-size-easily-in-javascript\n    (OK'ed by Professor Bell)\n     */\n    splitImageArray()\n    {\n        var index = 0;\n        var myArray = this.state.listOfImages;\n        var arrayLength = this.state.listOfImages.length;\n        var chunk_size = 10;\n        var tempArray = [];\n\n        for (index = 0; index < arrayLength; index += chunk_size) {\n            var myChunk = myArray.slice(index, index+chunk_size);\n            tempArray.push(myChunk);\n        }\n\n        this.setState({imagesToDisplay: tempArray});\n    }\n\n    /*\n    When the component unmounts, the observer method is called to avoid leakage.\n     */\n    componentWillUnmount()\n    {\n        if (this.state.observerMethod !== undefined)\n            this.state.observerMethod();\n    }\n\n    componentWillUpdate(prevProps)\n    {\n        \n    }\n\n    /*\n    Handles page changes\n     */\n    pageChangeHandler(pageNumber)\n    {\n        this.setState({activePage: pageNumber});\n    }\n\n    /*\n    If there are no images to show, don't show anything. Otherwise, show the images & buttons.\n     */\n    render()\n    {\n        if (this.state.listOfImages.length === 0 || this.state.imagesToDisplay.length === 0 || firebase.auth.currentUser === null)\n        {\n            return (\n                <div>\n                    <Pagination>\n                    </Pagination>\n\n                    <Pagination>\n                    </Pagination>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <Pagination\n                        activePage = {this.state.activePage}\n                        itemsCountPerPage={10}\n                        totalItemsCount={Object.keys(this.state.listOfMemes).length}\n                        pageRangeDisplayed={5}\n                        onChange = {this.pageChangeHandler}>\n                    </Pagination>\n\n                    <div>\n                        {\n                            Object.values(this.state.imagesToDisplay[this.state.activePage - 1]).map(v => {\n                                return <div className=\"alignDiv\">\n                                    <LoadedImage src={v.img}/>\n                                    <div className=\"text-right\">\n                                        <FavoriteButton src = {v}/>\n                                    </div>\n                                </div>\n                            })\n                        }\n                    </div>\n\n                    <Pagination\n                        activePage = {this.state.activePage}\n                        itemsCountPerPage={10}\n                        totalItemsCount={Object.keys(this.state.listOfMemes).length}\n                        pageRangeDisplayed={5}\n                        onChange = {this.pageChangeHandler}>\n                    </Pagination>\n                </div>\n            )\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}