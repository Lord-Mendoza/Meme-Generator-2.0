{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\zenik\\\\OneDrive\\\\School\\\\GMU\\\\Super Senior\\\\SWE 432\\\\Homeworks\\\\HW4\\\\src\\\\MemeGenerator.js\";\n\n/*\nLord Mendoza\nSWE 432 - HW4\n\nThe following is in charge of the \"Generate Memes\" page. Very similar to HW3 version, except this\ngives the option to Favorite a meme soon as it's regenerated. Also, when a meme is regenerated, it is\nautomatically added to the memes display in the home page (except the default one prior to pressing regenerate).\n */\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Button, ControlLabel, FormControl, FormGroup, Glyphicon } from \"react-bootstrap\";\nimport LoadedImage from \"./LoadedImage\";\nimport MemeClient from \"./MemeClient\";\nimport firebase from \"./firebase\";\nvar client = new MemeClient();\n\nvar MemeGenerator =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MemeGenerator, _Component);\n\n  function MemeGenerator(props) {\n    var _this;\n\n    _classCallCheck(this, MemeGenerator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MemeGenerator).call(this, props));\n    _this.state = {\n      selectedTemplate: undefined,\n      availableTemplates: undefined\n    };\n    _this.handleChangeSelectedTemplate = _this.handleChangeSelectedTemplate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MemeGenerator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      client.getTemplate().then(function (templates) {\n        _this2.setState({\n          availableTemplates: templates,\n          selectedTemplate: Object.keys(templates)[0]\n        });\n      });\n    }\n  }, {\n    key: \"handleChangeSelectedTemplate\",\n    value: function handleChangeSelectedTemplate(v) {\n      this.setState({\n        selectedTemplate: v.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.availableTemplates) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Loading list of available templates.\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Make a meme!\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Choose a template:\", React.createElement(FormControl, {\n        componentClass: \"select\",\n        value: this.state.selectedTemplate,\n        onChange: this.handleChangeSelectedTemplate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, Object.keys(this.state.availableTemplates).map(function (v) {\n        return React.createElement(\"option\", {\n          value: v,\n          key: v,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, v);\n      })), React.createElement(MemeCustomizer, {\n        templateName: this.state.selectedTemplate,\n        template: this.state.availableTemplates[this.state.selectedTemplate],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MemeGenerator;\n}(Component);\n\nexport { MemeGenerator as default };\n\nvar MemeCustomizer =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(MemeCustomizer, _Component2);\n\n  function MemeCustomizer(props) {\n    var _this3;\n\n    _classCallCheck(this, MemeCustomizer);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MemeCustomizer).call(this, props));\n    _this3.req = null;\n    var tmpText = {};\n\n    var _arr = Object.keys(_this3.props.template.text);\n\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var textblock = _arr[_i];\n      tmpText[textblock] = textblock;\n    }\n    /*\n    Added two new states:\n    -initialRun: tracks if the image generated is the \"default\" or initial one\n    -disableButton: uses initialRun to enable/disable \"Save meme\" option\n    -memeSaved: check if the user toggled for the meme to be saved\n     */\n\n\n    _this3.state = {\n      img: undefined,\n      text: tmpText,\n      updateInProgress: false,\n      disableButton: true,\n      initialRun: true,\n      memeSaved: false,\n      timeStamp: undefined\n    };\n    _this3.handleChangeInTextField = _this3.handleChangeInTextField.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.handleMemeTextChange = _this3.handleMemeTextChange.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.saveMeme = _this3.saveMeme.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    return _this3;\n  }\n\n  _createClass(MemeCustomizer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.handleMemeTextChange();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this4 = this;\n\n      if (this.props.template != prevProps.template && this.props.templateName) {\n        var _tmpText = {};\n\n        var _arr2 = Object.keys(this.props.template.text);\n\n        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n          var textblock = _arr2[_i2];\n          _tmpText[textblock] = textblock;\n        }\n\n        console.log(_tmpText); //Initializes the state again\n\n        this.setState({\n          img: undefined,\n          text: _tmpText,\n          initialRun: true\n        });\n        this.setState({\n          updateInProgress: true\n        });\n        this.req = client.generateMeme(this.props.templateName, _tmpText);\n        this.req.then(function (img) {\n          /*\n          Added code: Checks if its the first run (as to avoid the default from getting the option to be saved)\n           */\n          if (_this4.state.initialRun) _this4.setState({\n            img: img,\n            updateInProgress: false,\n            initialRun: false,\n            disableButton: true,\n            memeSaved: false\n          });else _this4.setState({\n            img: img,\n            updateInProgress: false,\n            disableButton: false\n          });\n        }).catch(function (e) {\n          return console.log(e);\n        });\n      }\n    }\n  }, {\n    key: \"handleMemeTextChange\",\n    value: function handleMemeTextChange(ev) {\n      var _this5 = this;\n\n      if (ev) ev.preventDefault();\n      this.setState({\n        updateInProgress: true\n      });\n      this.req = client.generateMeme(this.props.templateName, this.state.text);\n      this.req.then(function (img) {\n        /*\n        Added code: Checks if its the first run (as to avoid the default from getting the option to be saved), & further\n        checks if the meme is saved before (as to allow it to be saved again should the user choose to regenerate\n        the same template & text, per specs).\n         */\n        if (_this5.state.initialRun) _this5.setState({\n          img: img,\n          updateInProgress: false,\n          initialRun: false\n        });else {\n          _this5.setState({\n            timestamp: new Date().toString()\n          });\n\n          firebase.firestore.collection(\"spicyGeneratedMemes\").doc(_this5.state.timeStamp).set({\n            templateName: _this5.props.templateName,\n            templateText: _this5.state.text,\n            creationDate: _this5.state.timeStamp\n          });\n          if (_this5.state.memeSaved) _this5.setState({\n            img: img,\n            updateInProgress: false,\n            disableButton: false,\n            memeSaved: false\n          });else _this5.setState({\n            img: img,\n            updateInProgress: false,\n            disableButton: false\n          });\n        }\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    }\n  }, {\n    key: \"handleChangeInTextField\",\n    value: function handleChangeInTextField(v) {\n      var block = v.target.attributes[\"data-textblock\"].value;\n      var newText = this.state.text;\n      newText[block] = v.target.value;\n      this.setState({\n        text: newText\n      });\n    }\n    /*\n    Added code: Calls to firebase to store the template name & given text, as well as the\n    creation date for later sorting; differs from save via \"regenerate\" in that it uses the user's email as key.\n     */\n\n  }, {\n    key: \"saveMeme\",\n    value: function saveMeme(e) {\n      var docRef = firebase.firestore.collection(firebase.auth.currentUser.email).doc(this.state.timeStamp).set({\n        templateName: this.props.templateName,\n        templateText: this.state.text,\n        creationDate: this.state.timeStamp\n      });\n      this.setState({\n        memeSaved: true,\n        disableButton: true\n      });\n    }\n    /*\n    Added Code:\n     Added button: allows the user to save the meme generated to the database, with their email as key\n    Added conditional return: checks if the user saved the meme or not. If saved, the button changes to a\n    success & is disabled, else primary & enabled.\n    Added functionality: as a meme is \"regenerated\" it is automatically added to the general pool of memes generated by all users\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      if (!this.props.template.text) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Loading, there's no text on this?\"); //Shows version with save meme button on default\n\n      if (!this.state.memeSaved) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, \"Customize the text:\", React.createElement(\"form\", {\n          onSubmit: this.handleMemeTextChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, Object.keys(this.props.template.text).map(function (t) {\n          var txt = _this6.state.text[t];\n          if (!txt) txt = t;\n          return React.createElement(\"span\", {\n            key: t,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, React.createElement(ControlLabel, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, t), \" \", React.createElement(FormControl, {\n            type: \"text\",\n            value: txt,\n            disabled: _this6.state.updateInProgress,\n            onChange: _this6.handleChangeInTextField,\n            \"data-textblock\": t,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }));\n        }), React.createElement(Button, {\n          type: \"submit\",\n          disabled: this.state.updateInProgress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, \"Regenerate\"))), React.createElement(\"div\", {\n          className: \"alignDiv\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, React.createElement(LoadedImage, {\n          src: this.state.img,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"text-right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, React.createElement(Button, {\n          bsStyle: \"primary\",\n          disabled: this.state.disableButton,\n          onClick: this.saveMeme,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, \" Save Meme \"))));\n      } //Shows version with save meme button on success\n      else {\n          //If the image changed, don't show the \"saved\" button as its updating. Else show the saved button.\n          var savedButton = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }, \" \");\n          if (this.state.img) savedButton = React.createElement(\"div\", {\n            className: \"text-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235\n            },\n            __self: this\n          }, React.createElement(Button, {\n            bsStyle: \"success\",\n            disabled: this.state.disableButton,\n            onClick: this.saveMeme,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 236\n            },\n            __self: this\n          }, \" Save Meme \", React.createElement(\"b\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238\n            },\n            __self: this\n          }, \"\\u2714\"), \" \"));\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }, \"Customize the text:\", React.createElement(\"form\", {\n            onSubmit: this.handleMemeTextChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 244\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 245\n            },\n            __self: this\n          }, Object.keys(this.props.template.text).map(function (t) {\n            var txt = _this6.state.text[t];\n            if (!txt) txt = t;\n            return React.createElement(\"span\", {\n              key: t,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 250\n              },\n              __self: this\n            }, React.createElement(ControlLabel, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 250\n              },\n              __self: this\n            }, t), \" \", React.createElement(FormControl, {\n              type: \"text\",\n              value: txt,\n              disabled: _this6.state.updateInProgress,\n              onChange: _this6.handleChangeInTextField,\n              \"data-textblock\": t,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 250\n              },\n              __self: this\n            }));\n          }), React.createElement(Button, {\n            type: \"submit\",\n            disabled: this.state.updateInProgress,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256\n            },\n            __self: this\n          }, \"Regenerate\"))), React.createElement(\"div\", {\n            className: \"alignDiv\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 260\n            },\n            __self: this\n          }, React.createElement(LoadedImage, {\n            src: this.state.img,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 261\n            },\n            __self: this\n          }), savedButton));\n        }\n    }\n  }]);\n\n  return MemeCustomizer;\n}(Component);","map":{"version":3,"sources":["C:\\Users\\zenik\\OneDrive\\School\\GMU\\Super Senior\\SWE 432\\Homeworks\\HW4\\src\\MemeGenerator.js"],"names":["React","Component","Button","ControlLabel","FormControl","FormGroup","Glyphicon","LoadedImage","MemeClient","firebase","client","MemeGenerator","props","state","selectedTemplate","undefined","availableTemplates","handleChangeSelectedTemplate","bind","getTemplate","then","templates","setState","Object","keys","v","target","value","map","MemeCustomizer","req","tmpText","template","text","textblock","img","updateInProgress","disableButton","initialRun","memeSaved","timeStamp","handleChangeInTextField","handleMemeTextChange","saveMeme","prevProps","templateName","console","log","generateMeme","catch","e","ev","preventDefault","timestamp","Date","toString","firestore","collection","doc","set","templateText","creationDate","block","attributes","newText","docRef","auth","currentUser","email","t","txt","savedButton"],"mappings":"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","sourcesContent":["/*\nLord Mendoza\nSWE 432 - HW4\n\nThe following is in charge of the \"Generate Memes\" page. Very similar to HW3 version, except this\ngives the option to Favorite a meme soon as it's regenerated. Also, when a meme is regenerated, it is\nautomatically added to the memes display in the home page (except the default one prior to pressing regenerate).\n */\nimport React, {Component} from 'react';\nimport './App.css';\nimport {Button, ControlLabel, FormControl, FormGroup, Glyphicon} from \"react-bootstrap\"\nimport LoadedImage from \"./LoadedImage\";\n\nimport MemeClient from \"./MemeClient\";\nimport firebase from \"./firebase\"\n\nlet client = new MemeClient();\n\nexport default class MemeGenerator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {selectedTemplate: undefined, availableTemplates: undefined};\n        this.handleChangeSelectedTemplate = this.handleChangeSelectedTemplate.bind(this);\n\n    }\n\n    componentDidMount(){\n        client.getTemplate().then(templates => {\n            this.setState({\n                availableTemplates: templates,\n                selectedTemplate: Object.keys(templates)[0]\n            });\n        })\n    }\n    handleChangeSelectedTemplate(v) {\n        this.setState({selectedTemplate: v.target.value});\n    }\n\n    render() {\n        if (!this.state.availableTemplates)\n            return <div>Loading list of available templates.</div>\n        return (\n            <div>\n                <h2>Make a meme!</h2>\n                <div>\n                    Choose a template:\n                    <FormControl componentClass={\"select\"} value={this.state.selectedTemplate} onChange={this.handleChangeSelectedTemplate}>\n                        {\n                            Object.keys(this.state.availableTemplates).map(v => {\n                                return <option value={v} key={v}>{v}</option>\n                            })}\n                    </FormControl>\n                    <MemeCustomizer templateName={this.state.selectedTemplate}\n                                    template={this.state.availableTemplates[this.state.selectedTemplate]}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nclass MemeCustomizer extends Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.req = null;\n        let tmpText = {};\n        for (let textblock of Object.keys(this.props.template.text))\n        {\n            tmpText[textblock] = textblock;\n        }\n\n        /*\n        Added two new states:\n        -initialRun: tracks if the image generated is the \"default\" or initial one\n        -disableButton: uses initialRun to enable/disable \"Save meme\" option\n        -memeSaved: check if the user toggled for the meme to be saved\n         */\n        this.state = {img: undefined, text: tmpText, updateInProgress: false, disableButton: true, initialRun: true, memeSaved: false, timeStamp: undefined};\n        this.handleChangeInTextField = this.handleChangeInTextField.bind(this);\n        this.handleMemeTextChange = this.handleMemeTextChange.bind(this);\n        this.saveMeme = this.saveMeme.bind(this);\n    }\n\n    componentDidMount()\n    {\n        this.handleMemeTextChange();\n    }\n\n    componentDidUpdate(prevProps)\n    {\n        if (this.props.template != prevProps.template && this.props.templateName)\n        {\n            let tmpText = {};\n            for (let textblock of Object.keys(this.props.template.text))\n            {\n                tmpText[textblock] = textblock;\n            }\n            console.log(tmpText);\n\n            //Initializes the state again\n            this.setState({img: undefined, text: tmpText, initialRun: true});\n            this.setState({updateInProgress: true});\n            this.req =\n                client.generateMeme(\n                    this.props.templateName,\n                    tmpText\n                );\n            this.req.then(img => {\n                /*\n                Added code: Checks if its the first run (as to avoid the default from getting the option to be saved)\n                 */\n                if (this.state.initialRun)\n                    this.setState({img: img, updateInProgress: false, initialRun: false, disableButton: true, memeSaved: false});\n                else\n                    this.setState({img: img, updateInProgress: false, disableButton: false});\n            }).catch(e => console.log(e));\n        }\n    }\n\n    handleMemeTextChange(ev)\n    {\n        if (ev)\n            ev.preventDefault();\n        this.setState({updateInProgress: true});\n        this.req =\n            client.generateMeme(\n                this.props.templateName,\n                this.state.text\n            );\n        this.req.then(img => {\n            /*\n            Added code: Checks if its the first run (as to avoid the default from getting the option to be saved), & further\n            checks if the meme is saved before (as to allow it to be saved again should the user choose to regenerate\n            the same template & text, per specs).\n             */\n            if (this.state.initialRun)\n                this.setState({img: img, updateInProgress: false, initialRun: false});\n            else\n            {\n                this.setState({timestamp: new Date().toString()});\n                firebase.firestore.collection(\"spicyGeneratedMemes\").doc(this.state.timeStamp).set({\n                    templateName: this.props.templateName,\n                    templateText: this.state.text,\n                    creationDate: this.state.timeStamp\n                });\n\n                if (this.state.memeSaved)\n                    this.setState({img: img, updateInProgress: false, disableButton: false, memeSaved: false});\n                else\n                    this.setState({img: img, updateInProgress: false, disableButton: false});\n            }\n        }).catch(e => console.log(e));\n    }\n\n    handleChangeInTextField(v)\n    {\n        let block = v.target.attributes[\"data-textblock\"].value;\n        let newText = this.state.text;\n        newText[block] = v.target.value;\n        this.setState(\n            {text: newText}\n        )\n    }\n\n    /*\n    Added code: Calls to firebase to store the template name & given text, as well as the\n    creation date for later sorting; differs from save via \"regenerate\" in that it uses the user's email as key.\n     */\n    saveMeme(e)\n    {\n        var docRef = firebase.firestore.collection(firebase.auth.currentUser.email).doc(this.state.timeStamp).set({\n            templateName: this.props.templateName,\n            templateText: this.state.text,\n            creationDate: this.state.timeStamp\n        });\n        this.setState({memeSaved: true, disableButton: true});\n    }\n\n    /*\n    Added Code:\n\n    Added button: allows the user to save the meme generated to the database, with their email as key\n    Added conditional return: checks if the user saved the meme or not. If saved, the button changes to a\n    success & is disabled, else primary & enabled.\n    Added functionality: as a meme is \"regenerated\" it is automatically added to the general pool of memes generated by all users\n     */\n    render()\n    {\n        if (!this.props.template.text)\n            return <p>Loading, there's no text on this?</p>;\n\n        //Shows version with save meme button on default\n        if (!this.state.memeSaved)\n        {\n            return (\n                <div>\n\n                    Customize the text:\n                    <form onSubmit={this.handleMemeTextChange}>\n                        <FormGroup>\n                            {Object.keys(this.props.template.text).map(t => {\n                                let txt = this.state.text[t];\n                                if (!txt)\n                                    txt = t;\n                                return <span key={t}><ControlLabel>{t}</ControlLabel> <FormControl type=\"text\"\n                                                                                                   value={txt}\n                                                                                                   disabled={this.state.updateInProgress}\n                                                                                                   onChange={this.handleChangeInTextField}\n                                                                                                   data-textblock={t}/></span>\n                            })}\n                            <Button type={\"submit\"} disabled={this.state.updateInProgress}>Regenerate</Button>\n                        </FormGroup>\n                    </form>\n\n                    <div className=\"alignDiv\">\n                        <LoadedImage src={this.state.img}/>\n\n                        <div className=\"text-right\">\n                            <Button bsStyle=\"primary\"\n                                    disabled={this.state.disableButton}\n                                    onClick={this.saveMeme}> Save Meme </Button>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n        //Shows version with save meme button on success\n        else\n        {\n            //If the image changed, don't show the \"saved\" button as its updating. Else show the saved button.\n            var savedButton = <div> </div>;\n            if (this.state.img)\n                savedButton = <div className=\"text-right\">\n                    <Button bsStyle=\"success\"\n                            disabled={this.state.disableButton}\n                            onClick={this.saveMeme}> Save Meme <b>✔</b> </Button>\n                </div>;\n            return (\n                <div>\n\n                    Customize the text:\n                    <form onSubmit={this.handleMemeTextChange}>\n                        <FormGroup>\n                            {Object.keys(this.props.template.text).map(t => {\n                                let txt = this.state.text[t];\n                                if (!txt)\n                                    txt = t;\n                                return <span key={t}><ControlLabel>{t}</ControlLabel> <FormControl type=\"text\"\n                                                                                                   value={txt}\n                                                                                                   disabled={this.state.updateInProgress}\n                                                                                                   onChange={this.handleChangeInTextField}\n                                                                                                   data-textblock={t}/></span>\n                            })}\n                            <Button type={\"submit\"} disabled={this.state.updateInProgress}>Regenerate</Button>\n                        </FormGroup>\n                    </form>\n\n                    <div className=\"alignDiv\">\n                        <LoadedImage src={this.state.img}/>\n\n                        {savedButton}\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}